.TH QUIC  7 2024-01-15 "Linux Man Page" "Linux Programmer's Manual"
.SH NAME
quic \- QUIC protocol.
.SH SYNOPSIS
.nf
.B #include <netinet/in.h>
.B #include <netinet/quic.h>
.sp
.B quic_socket = socket(PF_INET, SOCK_STREAM, IPPROTO_QUIC);
.B quic_socket = socket(PF_INET, SOCK_DGRAM, \ IPPROTO_QUIC);
.fi
.SH DESCRIPTION
This is an implementation of the QUIC protocol as defined in RFC9000 (QUIC: A
UDP-Based Multiplexed and Secure Transport). QUIC provides applications with
flow-controlled streams for structured communication, low-latency connection
establishment, and network path migration. QUIC includes security measures that
ensure confidentiality, integrity, and availability in a range of deployment
circumstances.

.PP
This implementation of QUIC in the kernel space enables users to utilize
the QUIC protocol through common socket APIs in user space. Additionally,
kernel subsystems like SMB and NFS can seamlessly operate over the QUIC
protocol after handshake using net/handshake APIs.

.PP
In userspace, similar to TCP and SCTP, a typical server and client use the
following system call sequence to communicate:
.PP
        Client                             Server
     ------------------------------------------------------------------
     sockfd = socket(IPPROTO_QUIC)      listenfd = socket(IPPROTO_QUIC)
     bind(sockfd)                       bind(listenfd)
                                        listen(listenfd)
     connect(sockfd)
     quic_client_handshake(sockfd)
                                        sockfd = accecpt(listenfd)
                                        quic_server_handshake(sockfd, cert)

     sendmsg(sockfd)                    recvmsg(sockfd)
     close(sockfd)                      close(sockfd)
                                        close(listenfd)
.PP
On the client side, the connect() function initializes the keys and route, while
quic_client_handshake() sends the initial packet to the server. Upon receiving the
initial packet on the listen socket, the server creates a request socket, processes
it through accept(), and subsequently generates a new common socket, returning it to
the user. Meanwhile, the quic_server_handshake() function manages the reception and
processing of the initial packet on the server, ensuring the handshake proceeds
seamlessly until completion.

.PP
For kernel consumers, activating the tlshd service in userspace is essential. This
service is responsible for receiving and managing kernel handshake requests for
kernel sockets. Within the kernel space, the APIs mirror those used in userspace:

        Client                                 Server
     ---------------------------------------------------------------------------
     __sock_create(IPPROTO_QUIC, &sock)     __sock_create(IPPROTO_QUIC, &sock)
     kernel_bind(sock)                      kernel_bind(sock)
                                            kernel_listen(sock)
     kernel_connect(sock)
     tls_client_hello_x509(args:{sock})
                                            kernel_accept(sock, &newsock)
                                            tls_server_hello_x509(args:{newsock})

     kernel_sendmsg(sock)                   kernel_recvmsg(newsock)
     sock_release(sock)                     sock_release(newsock)
                                            sock_release(sock)

Please note that tls_client_hello_x509() and tls_server_hello_x509() are kernel APIs
located in net/handshake/. These APIs are utilized to dispatch the handshake request
to the userspace tlshd service and wait until the operation is successfully completed.

.SH SYSCTLS
These variables can be accessed by the
.B /proc/sys/net/quic/*
files or with the
.BR sysctl (2)
interface.  In addition, most IP sysctls also apply to QUIC. See
.BR ip (7).
Please check kernel documentation for this, at Documentation/networking/ip-sysctl.rst.
.PP
Upon loading the QUIC module, it also creates /proc/net/quic under procfs, enabling
users to access and inspect information regarding existing QUIC connections.

.SH SEND and RECEIVE MSGS
The ancillary data is carried in msg_control field of struct msghdr, which is
used in
.B sendmsg(2)
and
.B recvmsg(2)
call. The QUIC stack uses the ancillary data to communicate the attributes of
the message stored in msg_iov to the socket. Each ancillary data item is preceded
by a struct cmsghdr, see
.B cmsg(3).
.PP
The cmsg type QUIC_STREAM_INFO is used to specify stream information for sendmsg()
and describes stream information about a received message through recvmsg() with
struct quic_stream_info:

    struct quic_stream_info {
        uint64_t stream_id;
        uint32_t stream_flag;
    };

    - For stream_id, the first 2 bits are for the stream type for sending or receiving:

      QUIC_STREAM_TYPE_SERVER_MASK: 0x1, server-side stream
      QUIC_STREAM_TYPE_UNI_MASK: 0x2, unidirectional stream

    - For stream_flag, sending flag includes:

      QUIC_STREAM_FLAG_NEW: open a stream and send the first data
      QUIC_STREAM_FLAG_FIN: send the last data and close a stream
      QUIC_STREAM_FLAG_DATAGRAM: send data as datagram

      and receiving flag includes:

      QUIC_STREAM_FLAG_NOTIFICATION: data received is an event
      QUIC_STREAM_FLAG_FIN: data received is the last one for this stream
      QUIC_STREAM_FLAG_DATAGRAM: data received is datagram

All these related macros and structures are defined in /usr/include/netinet/quic.h.

.PP
There are two APIs wrapped for sending and receiving msgs with stream information:
.nf
.sp
.B quic_sendmsg(int sockfd, const void *msg, size_t len, uint64_t sid, uint32_t flag)
.B quic_recvmsg(int sockfd, void *msg, size_t len, uint64_t *sid, uint32_t *flag)
.sp
.fi
where sid is equivalent to stream_id while flag is equivalent to stream_flag in
struct quic_stream_info above.

.PP
If one wants to use send() and recv() to send and receive msgs, some equivalent
flags are provided:

    - recv():

      MSG_NOTIFICATION
      MSG_FIN
      MSG_DATAGRAM

    - send():

      MSG_SYN [ | MSG_STREAM_UNI]
      MSG_FIN
      MSG_DATAGRAM

However, as stream_id can not be passed into kernel without cmsg, send() with
MSG_SYN will open the next available stream, with MSG_STREAM_UNI to set the
stream type to unidirectional.

.SH HANDSHAKE APIS
The implementation uses the sendmsg() and recvmsg() with the cmsg type
QUIC_HANDSHAKE_INFO to send and receive raw TLS messages from or to kernel and
exchange them in userspace via TLS library like gnutls. Meanwhile, they use some
socket options to get necessary information like Transport Parameters from kernel
to build TLS messages, and set secrets derived for different levels to kernel for
QUIC packets encryption and decryption.

.PP
These are two common handshake APIs:
.nf
.sp
.B int quic_client_handshake(int sockfd, char *pkey_file, char *cert_file);
.B int quic_server_handshake(int sockfd, char *pkey_file, char *cert_file);
.sp
.fi

- PSK mode:

   pkey_file: psk file name
   cert_file: null

- Certificate mode:

   pkey_file: private key file name, can be null for client
   cert_file: certificate file name, can be null for client

These functions return 0 for success and errcode in case of an error.

.PP
and another two advanced handshake APIs with more TLS Handshake Parameters:
.nf
.sp
.B int quic_client_handshake_parms(int sockfd, struct quic_handshake_parms *parms);
.B int quic_server_handshake_parms(int sockfd, struct quic_handshake_parms *parms);
.sp
.fi

struct quic_handshake_parms members are described below:

    struct quic_handshake_parms {
        uint32_t           timeout;    /* handshake timeout in milliseconds */

        gnutls_privkey_t   privkey;    /* private key for x509 handshake */
        gnutls_pcert_st    *cert;      /* certificate for x509 handshake */
        char               *cafile;    /* system ca is used if not set */
        char               *peername;  /* - server name for client side x509 handshake or,
                                        * - psk identity name chosen during PSK handshake
                                        */
        char               *names[10]; /* psk identifies in PSK handshake */
        gnutls_datum_t     keys[10];   /* - psk keys in PSK handshake, or,
                                        * - certificates received in x509 handshake
                                        */
        uint32_t           num_keys;   /* keys total numbers */
    };

These functions return 0 for success and errcode in case of an error. Currently it's
used by tlshd service for Kernel Consumer handshake request.

.SH EVENTS and NOTIFICATIONS
An QUIC application may need to understand and process events and errors that happen
on the QUIC stack. These events include stream updates and max_streams, connection
close and migration, key updates, new token. When a notification arrives, recvmsg()
returns the notification in the application-supplied data buffer via msg_iov, and
sets MSG_NOTIFICATION in msg_flags of msghdr and QUIC_STREAM_FLAG_NOTIFICATION in
stream_flags of cmsg quic_stream_info. See QUIC_EVENT socket option for the event
enabling. The different events are listed below, and all these related macros and
structures are defined in /usr/include/netinet/quic.h.

.TP
.B QUIC_EVENT_STREAM_UPDATE:
Only the notification with one of these states is sent to userspace:

    QUIC_STREAM_SEND_STATE_RECVD
    QUIC_STREAM_SEND_STATE_RESET_SENT:  only if STOP_SENDING is received
    QUIC_STREAM_SEND_STATE_RESET_RECVD
    QUIC_STREAM_RECV_STATE_RECV:        only when the last frag hasn't arrived.
    QUIC_STREAM_RECV_STATE_SIZE_KNOWN:  only if data comes out of order
    QUIC_STREAM_RECV_STATE_RECVD
    QUIC_STREAM_RECV_STATE_RESET_RECVD

Data format in the event:

    struct quic_stream_update {
        uint64_t id;
        uint32_t state;
        uint32_t errcode; /* or known_size */
    };

.TP
.B QUIC_EVENT_STREAM_MAX_STREAM:
This notification is created when max_streams frame is received, and this is useful
when using QUIC_STREAM_FLAG_ASYNC to open a stream whose id exceeds the max stream
count. After receiving this notification, try to open this stream again.

Data format in the event:

    uint64_t max_stream;

.TP
.B QUIC_EVENT_CONNECTION_CLOSE
This notification is created when receiving a close frame from peer where it can set
the close info with QUIC_SOCKOPT_CONNECTION_CLOSE socket option.

Data format in the event:

    struct quic_connection_close {
        uint32_t errcode;
        uint8_t frame;
        uint8_t phrase[];
    };

.TP
.B QUIC_EVENT_CONNECTION_MIGRATION
This notification is created when either side successfully changes its source address
by QUIC_SOCKOPT_CONNECTION_MIGRATION socket option or its dest address by the same
socket option called by peer. The parameter tells you if it is a local or peer
connection migration and then you can get the new address with getsockname() or
getpeername().

Data format in the event:

    uint8_t local_migration;

.TP
.B QUIC_EVENT_KEY_UPDATE
This notification is created when both sides have used the new key after key update,
and the parameter tells you which the new key phase is.

Data format in the event:

    uint8_t key_update_phase;

.TP
.B QUIC_EVENT_NEW_TOKEN
Since the handshake is in userspace, this notification is created whenever the
frame of NEW_TOKEN is received from the peer where it can send these frame via
QUIC_SOCKOPT_NEW_TOKEN socket option.

Data format in the event:

    uint8_t *token;

.SH "SOCKET OPTIONS"
To set or get a QUIC socket option, call
.BR getsockopt (2)
to read or
.BR setsockopt (2)
to write the option with the option level argument set to
.BR SOL_QUIC.
Note that all these macros and structures described for parameters are defined
in /usr/include/linux/quic.h.
.TP
.B QUIC_SOCKOPT_STREAM_OPEN
This option is used to open a stream.

For reading only, and the parameter type is:

    struct quic_stream_info {
        uint64_t stream_id;
        uint32_t stream_flag;
    };

stream_id can be set to:

    >= 0: open a stream with a specific stream id.
    -1:  open next available stream and return the stream id to users via stream_id.

stream_flag can be set to:

    QUIC_STREAM_FLAG_UNI: open the next unidirectional stream
    QUIC_STREAM_FLAG_ASYNC: open the stream without block

.TP
.B QUIC_SOCKOPT_STREAM_RESET
This option is used to reset a stream and it means that the endpoint will not
guarantee delivery of stream data.

For writing only, and the parameter type is:

    struct quic_errinfo {
        uint64_t stream_id;
        uint32_t errcode;
    };

errcode is Application Protocol Error Code left to application protocols.

.TP
.B QUIC_SOCKOPT_STREAM_STOP_SENDING
This option is used to request that a peer cease transmission on a stream.

For writing only, and the parameter type is:

    struct quic_errinfo {
        uint64_t stream_id;
        uint32_t errcode;
    };

errcode is Application Protocol Error Code left to application protocols.

.TP
.B QUIC_SOCKOPT_CONNECTION_MIGRATION
This option is used to initiate a connection migration. It can also be used to
set preferred_address transport param before handshake on server side.

For writing only, and the parameter type is:

    struct sockaddr_in or struct sockaddr_in6.

to tell kernel the new local address to bind.

.TP
.B QUIC_SOCKOPT_KEY_UPDATE
This option is used to initiate a key update or rekeying.

For writing only, and the parameter type is

    null.

.TP
.BR QUIC_SOCKOPT_EVENT
This option is used to enable or disable one type of event or notification.

For reading and writing, and the parameter type is:

    struct quic_event_option {
        uint8_t type;
        uint8_t on;
    };

See
.BR EVENTS and NOTIFICATIONS
for type, on is 1 to enable and 0 to disable, all events are disabled by default.

.TP
.B QUIC_SOCKOPT_CONNECTION_CLOSE
This option is used to set or get the close context, which includes errcode and
phrase and frame. On close side, set it before calling close() to tell peer the
closing info, while on being closed side get it to show the peer closing info.

For reading and writing, and the parameter type is:

    struct quic_connection_close {
        uint32_t errcode;
        uint8_t frame;
        uint8_t phrase[];
    };

errcode is Application Protocol Error Code left to application protocols, phrase
is a string to describe more details, frame is the frame type that caused the
closing. All three are 0 or null by default.

.TP
.B QUIC_SOCKOPT_TRANSPORT_PARAM
This option is used to configure the transport parameters, including not only
the quic original transport param, but also some handshake options.

For reading and writing, and the parameter type is:

    struct quic_transport_param {
        uint8_t     remote;
        uint8_t     disable_active_migration; (0 by default)
        uint8_t     grease_quic_bit; (0)
        uint8_t     stateless_reset; (0)
        uint8_t     disable_1rtt_encryption; (0)
        uint8_t     disable_compatible_version; (0)
        uint64_t    max_udp_payload_size; (65527)
        uint64_t    ack_delay_exponent; (3)
        uint64_t    max_ack_delay; (25000)
        uint64_t    active_connection_id_limit; (7)
        uint64_t    max_idle_timeout; (30000000 us)
        uint64_t    max_datagram_frame_size; (0)
        uint64_t    max_data; (65536 * 32)
        uint64_t    max_stream_data_bidi_local; (65536 * 4)
        uint64_t    max_stream_data_bidi_remote; (65536 * 4)
        uint64_t    max_stream_data_uni; (65536 * 4)
        uint64_t    max_streams_bidi; (100)
        uint64_t    max_streams_uni; (100)
        uint64_t    initial_smoothed_rtt; (333000)

        uint32_t    plpmtud_probe_timeout; (0)
        uint8_t     validate_peer_address; (0)
        uint8_t     receive_session_ticket; (0)
        uint8_t     certificate_request; (0)
        uint8_t     congestion_control_alg; (QUIC_CONG_ALG_RENO)
        uint32_t    payload_cipher_type; (0)
        uint32_t    version; (QUIC_VERSION_V1)
    };

These members in the 1st group are from RFC9000, and in the 2nd group, the members are:

    - plpmtud_probe_timeout: plpmtud probe timeout in usec, 0: disabled,
                             at least QUIC_MIN_PROBE_TIMEOUT (5000000)
    - validate_peer_address: for server only, verify token and send retry packet
    - receive_session_ticket: for client only, handshake done until ticket is recvd
    - certificate_request: for server, 0: IGNORE 1: REQUEST 2: REQUIRE
                           for client, 3: NO CERTIFICATE VALIDATION
    - congestion_control_alg: congestion control algorithm
    - payload_cipher_type: AES_GCM_128/AES_GCM_256/AES_CCM_128/CHACHA20_POLY1305
    - version:  QUIC_VERSION_V1 or V2 for now

See inline notes for default values.

Note 'remote' member allows users to set remote transport parameter. Together with
the session resumption ticket, it is used to set the remote transport parameter
from last connection before sending 0-RTT DATA.

.TP
.B QUIC_SOCKOPT_TOKEN
On Client this option is used to set regular token, which is used for the peer
server's address verification. The token is usually issued by peer from the last
connection and got via setsockopt with this option or QUIC_EVENT_NEW_TOKEN event.

On Server this option is used to issue the token to Client for the next connection's
address verification

For reading and writing, and the parameter type is:

    uint8_t *opt for client, or null for server.

The default value in socket is null.

.TP
.B QUIC_SOCKOPT_ALPN
This option is used to set or get the Application-Layer Protocol Negotiation before
handshake, multiple ALPNs are separated by ',' e.g. "smbd, h3, ksmbd".

On server side, during handshake it gets ALPN via this socket option and matches
the ALPN from the client side, and then sets the matched ALPN to the socket, so
that users can get the selected ALPN via this socket option after handshake.

Note ALPN matching within the kernel is also supported, which directs incoming
requests to relevant applications across different processes based on ALPN.

For reading and writing, and the parameter type is:

    char *alpn.

The default value is null.

.TP
.B QUIC_SOCKOPT_SESSION_TICKET
This option is used to set session resumption ticket on Client, which is used for
session resumption. The ticket is usually issued by peer from the last connection
and got via setsockopt with this option.

For reading and writing, and the parameter type is:

    uint8_t *opt for client, or null for server.

The default value is null.

.SH AUTHORS
Xin Long <lucien.xin@gmail.com>
.SH "SEE ALSO"
.BR socket (7),
.BR socket (2),
.BR ip (7),
.BR bind (2),
.BR listen (2),
.BR accept (2),
.BR connect (2),
.BR sendmsg (2),
.BR recvmsg (2),
.BR sysctl (2),
.BR getsockopt (2),
.sp
RFC9000 for the QUIC specification.
